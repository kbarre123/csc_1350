Questions on the four algorithms that we have studied:


I: BINARY SEARCH

Consider the binary search method below.


public static int binarySearch(int[] list, int targetKey)
{
   int low = 0, mid, high = list.length - 1;
   while (low <= high)
   {
      mid = (low + high)/2;
	  if (targetKey == list[mid])
	     return mid;
      else if (targetKey < list[mid])
         high = mid - 1;
      else
         low = mid + 1;
   }
   return -1;
}

Given the following statements:

int list[] = {2, 7, 11, 15, 18. 19, 24, 30, 35, 45};
int returnValue = binarySearch(list, 24);

a) Trace the action of the binarySearch method, given the targetKey 24, 
   during the execution of the code segment by completing the table
   below:

   low    mid    high  found
   0      4      9       N
   5      7      9       N
   5      5      6       N
   6      6      6       Y
   
b) What will be the value of the 'returnValue' variable after the code
   segment is executed?
   
   Ans: 6
   
c) How many keys (elements of the array) were examined/visited/accessed
   during the execution of the code segment?

   Ans: 4

d) List the keys in the order examined.

   Ans: 18, 30, 19, 24

e) How many comparison operations were performed during the search?
   
   Ans: 11

f) Suppose a computer has a CPU that takes 2.5 microseconds to compare
   integers, assuming all other operations during the search are negligible,
   approximately how long with the computer take to search for 24 in the list?

   Ans: 2.5 x 11 =  27.5 microseconds   
   
g) Suppose that a CPU takes at most 30 microseconds to search a list that has
   500 elements (keys). At most, approximately how long will the same CPU take to search a 
   list that has 2000 keys?

   Ans:  For linear search, t(n) ~ log n. Therefore,
         30  :   log 500
         t   :   log 2000

         t  = 30 x log 2000
              ------------- 
                  log 500			  
   
II: LINEAR SEARCH

Consider the linear search method below.


public static int linearSearch(int[] list, int targetKey)
{
   int index;
   for (index=0; index<list.length; index++)
   {
	  if (targetKey == list[index])
	     return index;
   }
   return -1;
}

Given the following statements:

int list[] = {2, 7, 11, 15, 18. 19, 24, 30, 35, 45};
int returnValue = linearSearch(list, 24);

a) Trace the action of the linearSearch method, give the targetKey 24, 
   during the execution of the code segment by completing the table
   below:

   Ans:
   
   index    key examined    found
   0        2               N
   1        7               N
   2        11              N
   3        15              N
   4        18              N
   5        19              N
   6        24              Y
   
b) What will be the value of the 'returnValue' variable after the code
   segment is executed?
   
   Ans: 6
   
c) How many keys (elements of the array) were examined/visited/accessed
   during the execution of the code segment?

   Ans: 7

d) List the keys in the order examinded.

   Ans: 2, 7, 11, 15, 18, 19, 24

e) How many comparison operations were performed during the search?
   
   Ans: 14

f) Suppose a computer has a CPU that takes 2.5 microseconds to compare
   integers, assuming all other operations during the search are negligible,
   approximately how long with the computer take to search for 24 in the list?

   Ans: 2.5 x 14 =  35 microseconds   
   
g) Suppose that a CPU takes at most 30 microseconds to search a list that has
   500 elements (keys). At most, approximately how long will the same CPU take to search a 
   list that has 2000 keys?

   Ans:  For linear search, t(n) ~ n. Therefore,
         30  :   500
         t   :   2000

         t  = 30 x 2000
              ----------   = 120 microseconds 
                500	   

III: INSERTION SORT


Consider the insertion sort method below.


public static void insertionSort(int[] list)
{
   int i, j, temp;
   for (i=0; i < list.length; i++)
   {
      j = i+1;
      temp = list[j];
      while (j>0 && temp < list[j-1])
      {
         list[j] = list[j-1];
         j--;
      }		 
      list[j] = temp;   
   }	     
	  
}

Given the following statements:

int list[] = {7, 15, 2, 35, 30, 11, 19};
insertionSort(list);

a) Trace the action of the insertionSort method by showing the 
   contents of the array after each insertion. Also tally the number of 
   data transfers and comparisons during each insertion. A data transfer occurs
   when data is written from one cell in the array to another. Note that it still
   counts as a transfer if data is read from a cell and written to the same cell.
   
   Ans:
   
   insertion#   key inserted  content of the array  # data transfers # of comparisons
   1            15            7  15 2 35 30 11 19   1                3
   2            2             2 7 15 35 30 11 19    3                6
   3            35            2 7 15 35 30 11 19    1                3           
   4            30            2 7 15 30 35 11 19    2                5
   5            11            2 7 11 15 30 35 19    4                9
   6            19            2 7 11 15 19 30 35    3                7
   
b) How many data transfers are required to sort the array?
   Ans: 14
   
c) How many comparisons were carried out during the 
   execution of the code segment?

   Ans: 33 comparisons

d) Suppose a computer has a CPU that takes 2.5 microseconds to compare
   integers and 6 microsecond to transfer integers, assuming all other 
   operations during the search are negligible, approximately how long 
   will the computer take to sort the list?

   Ans: 2.5 x 33 +  6 x 14 =  82.5 + 84 = 166.5 microseconds   
   
g) Suppose that a CPU takes at most 30 microseconds to sort a list that has
   500 elements (keys). At most, approximately how long will the same CPU take to sort a 
   list that has 2000 keys?

   Ans:  For linear search, t(n) ~ n^2 Therefore,
         30  :   (500)^2
         t   :   (2000)^2

         t  = 30 x 2000 x 2000
              ------------- ---   = 480 microseconds
                 500 x 500	   
   

III: SELECTION SORT


Consider the selection sort method below.


public static void selectionSort(int[] list)
{
   int i, j, minPos;
   int size = list.length;
   
   for (i=0; i < size - 1; i++)
   {
      minPos = i;
      for (j = i+1; j < size; j++)
      {
	     if (list[minPos] < list[j])
	     {
		    minPos = j;
         }
      }
	  temp = list[i];
	  list[i] = list[minPos];
	  list[minPos] = temp;
    }
}

Given the following statements:

int list[] = {7, 15, 2, 35, 30, 11, 19};
selectionSort(list);

a) Trace the action of the selectionSort method by showing the 
   contents of the array after each pass. A pass is a scan 
   through the array beginning at the left most element and 
   moving rightward.
   
   Ans:
   
   pass #   contents of the array  # of swaps  # of comparisons
   1        2 15 7 35 30 11 19     1           14
   2        2 7 15 35 30 11 19     1           12
   3        2 7 11 35 30 15 19     1           10
   4        2 7 11 15 30 35 19     1           8
   5        2 7 11 15 19 35 30     1           6
   6        2 7 11 15 19 30 35     1           4
   
b) How many swaps are required to sort the array?
   Ans: 6
   
c) How many comparisons were carried out during the 
   execution of the code segment?

   Ans: 14 + 12 + 10 + 8 + 6 + 4  = 54 comparisons

d) Suppose a computer has a CPU that takes 2.5 microseconds to compare
   integers and 6 microseconds to swap integers, assuming all other 
   operations during the sort are negligible, approximately how long 
   will the computer take to sort the list?

   Ans: 2.5 x 54 + 6 x 6 =  135 + 36 = 161 microseconds     
   
g) Suppose that a CPU takes at most 30 microseconds to sort a list that has
   500 elements (keys). At most, approximately how long will the same CPU take to sort a 
   list that has 2000 keys?

   Ans:  For selection sort, t(n) ~ n^2 Therefore,
         30  :   (500)^2
         t   :   (2000)^2

         t  = 30 x 2000 x 2000
              ------------- ---   = 480 microseconds
                 500 x 500	 
