Summary of Insertion Sort Lecture: 14.3

int[] list = {5,4,32,6,4,6,5};

a) Trace the action of the insertion sort algorithm on
   the list array, showing the contents of the array after
   each insertion.
   
   Ans:   insertion                       #key comparisons     #shifts/transfers
 	  # 1: 4 5 | 32 6 4 6 5           1                    1 
          # 2: 4 5 32 | 6 4 6 5           1                    1
          # 3: 4 5 6 32 | 4 6 5           2                    2 
          # 4: 4 4 5 6 32 | 6 5           4                    4
          # 5: 4 4 5 6 6 32 | 5           2                    2
          # 6: 4 4 5 5 6  6  32           4                    4

b) How many shifts/data transfers are required to sort the array?
   
   Ans: 14 transfers	
   
c) How many key-comparisons are done during the 
   execution of the algorithm?
   
   Ans: 14 key-comparisons
   
d) Suppose this task was performed on a CPU that takes
   2 microseconds to transfer data in memory and 3 microseconds
   to compare keys, how long will it take the array to be
   sorted, all things being equal?
   
   Ans: 14 * 2  = 28 microseconds for the transfers
        14 * 3  = 42 microseconds for the comparisons
                = 70 microseconds for the task  
			   
e) Suppose a CPU takes 25 ms to sort a list that has 500 keys. 
   How long will the same CPU take to sort a list that has 750
   keys, assuming both lists are in reverse order?

   Ans:  t(n) ~ n^2   for insertion sort

       Therefore,    25   ~   (500)^2   
                      t   ~   (750)^2
					
		cross-multiplying, we get:
		(500)^2 t  = 25 * (750)^2
		
        t = 25 * 750 * 750        25*15*15       25*3*3     
            --------------    =   ---------  =  -------  =  225/4 = 56.25 ms
              500 * 500             10*10         2*2
			  

f) How would you sort, using the InsertionSorter class in the book, and print the list array?

   Ans: InsertionSorter.sort(list);
        System.out.println(Arrays.toString(list));