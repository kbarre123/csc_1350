Summary of Searches Lecture: 14.6

LINEAR SEARCH

int[] list = {5,4,32,6,4,6,5};

a) Trace the action of the linear search on
   the list array, for the search key 6, by
   completing the table below:

Ans:   
   index     key     #comparisons   found
   0         5       2              N
   1         4       2              N
   2         32      2              N
   3         6       2              Y
   
b) What value will the algorithm return?
   Ans: 3
   
c) How many comparisons are performed during the search?
   Ans: 8		
   
d) How many keys are examined/visited during the search?
   Ans: 4

e) List the keys in the order visited.
   Ans: 5, 4, 32, 6 
   
f) Suppose this task was performed on a CPU that takes
   3 microseconds to perform a comparison, approximately how long 
   will it take the search to be completed?
   
   Ans: 3 * 8  = 24 microseconds 
   
g) Suppose a CPU takes at 25 ms to search for a target key in a list that
   has 500 keys when the key is not in the list. How long will the same 
   CPU take to search a list that has 750 keys for a target key that is
   not in the list?

   Ans:  t(n) ~ n   for linear search

       Therefore,    25   ~   500   
                      t   ~   750
					
		cross-multiplying, we get:
		500t  = 25 * 750
		
        t = 25 * 750        25*15       25*3     
            ---------  =   -------  =  ------  =  75/2 = 37.5 ms
              500             10         2
			  

h) How would you perform the search, using the LinearSearcher class in the book, and print the return value?
   Ans: System.out.println("return value is "+LinearSearcher.search(list,6));
 

 
BINARY SEARCH

a) Give a fundamental difference between binary search and linear search.
Ans: binary search only works on ordered list while linear search work on
     both ordered and unordered lists.
	 
	 
int[] list = {1, 3, 5, 7, 7, 11, 13, 15, 17, 19, 23};

b) Trace the action of the binary search on
   the list array, for the search key 16, by
   completing the table below:

Ans:   
   low     mid       high       found      #comparisons
   0         5       10         N          3 
   6         8       10         N          3
   6         6       7          N          3
   7         7       7          N          3
   8                 7          N          1
   
b) What value will the algorithm return?
   Ans: -1
   
c) How many comparisons are performed during the search?
   Ans: 13		
   
d) How many keys are examined/visited during the search?
   Ans: 4

e) List the keys in the order visited.
   Ans: 11, 17, 13, 15 
   
f) Suppose this task was performed on a CPU that takes
   3 microseconds to perform a comparison, approximately how long 
   will it take the search to be completed?
   
   Ans: 3 * 13  = 39 microseconds 
   
g) Suppose a CPU takes at most 25 ms to search for a target key in a list that
   has 500 keys using binary search. At most how long will the same 
   CPU take to search a list that has 750 keys using binary search?

   Ans:  t(n) ~ log n   for binary search

       Therefore,    25   ~   log(500)   
                      t   ~   log(750)
					
		cross-multiplying, we get:
		log(500)t  = 25 * log(750)
		
        t = 25 * log(750)           
            ---------------  
              log(500)       

       Simplification is not required, but using a calculator you get
       t = 26.6 ms	   
			  

h) How would you perform the search, using the BinarySearcher class in the book, and print the return value?
   Ans: System.out.println("return value is "+BinarySearcher.search(list,0,10,16));
 