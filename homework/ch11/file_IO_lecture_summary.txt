4/23: File I/O Lecture Summary (Sections 11.1-11.2)

At times, we are processing a huge quantity of data and it can
be done more efficiently using text files. If we have an error,
we need not re-type all the data. We simply edit the file, make
the correction in the data file and re-run the program without
re-entering all the data. Further, we only need to run the program
once and save the output to a file to see the output later. We do
not need to run the program every time we wish to see the out.

As of Java SDK 1.5, file I/O can be handled very elegantly using
classes defined in the Java API.

Here are some suggested steps for reading input from a file:
Note: There may be alternate ways that are less elegant.

1. import java.util (required for Scanner) and java.io (required for
   IOException).
   
2. Define a try-catch statement that handles IOException in which
   you do the following:   
   
   a. create a Scanner object and connect the object to a File object
      containing your file.
   
      eg: Scanner fileIn = new Scanner(new File(myFileName));
   
   b. define a while-not-end-of-file loop to process the input file
      one row at a time.

      while (some condition based on the data type of the first column)
      {
         read a row of data
	      process the row of data
      }   
      -reading the data using the scanner object connect to the file
	  involves the standard methods defined in the scanner class:
	  .nextInt(), nextDouble(), next(), nextLine(), etc
   
   c. close the file stream that is connected to the file.
      This is usually done after the while-not-end-of-file loop
      eg: fileIn.close().   
	  

Here are some suggestedteps for writing input from a file:
Note: There may be alternate ways that are less elegant.   
   
1. Put the output statement in a try-catch statement.

2. Define a PrintWriter object that is connected to the output file:
   eg: PrintWriter fileOut = new PrintWriter(new File(myOutputFileName));   
   
3. You can the use the name of the PrintWriter to invoke any print method,
   (print(), println() and printf()), to redirect your output to the file 
   that the PrintWriter object is connected.

4. close the PrintWriter once you are done writing to the file. Note that
   this is very critical because the data is temporarily written to a buffer
   in memory and must be flushed from the buffer and written to the actual
   output file on your disk.


Handling potential I/O exceptions:

In the catch block of your try-catch statement, you can handle any generic
IOException and then quit the program.

eg:   catch(IOException e)
      {
         System.out.println(e);
         System.exit(1);
      }		 
	  